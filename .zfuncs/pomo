#!/usr/bin/env zsh

set -euo pipefail

function usage() {
  cat << HEREDOC
pomo

Usage:
  pomo help                        show this screen
  pomo timer <mins> [<message>]    start a single run timer
  pomo start [options]             start a traditional pomodoro timer

Options:
  -d <mins>, --duration <mins>     the duration of the pomodoro [default: 25]
  -s <mins>, --short-break <mins>  the duration of the short break [default: 5]
  -l <mins>, --long-break <mins>   the duration of the long break [default: 15]
HEREDOC
}

###############################################################################
# utils
##

function pomo_notify() {
  local title=$1
  local message=$2
  local icon=$3
  local kernel 

  kernel=$(uname -s)

  case $kernel in
    Linux) notify-send $title $message --icon=$icon ;;
    Darwin) terminal-notifier -message $message -title pomo --subtitle $title ;;
    *) ;;
  esac
}

###############################################################################
# initialization
###
typeset -A state

state[working]="working"
state[short_break]="short_break"
state[long_break]="long_break"

typeset -A title

title[${state[working]}]="working"
title[${state[short_break]}]="short break"
title[${state[long_break]}]="long break"


typeset -A message

message[${state[working]}]="get it done."
message[${state[short_break]}]="drink, stretch, breathe."
message[${state[long_break]}]="take a break, pal."


typeset -A icon

icon[${state[working]}]="/usr/share/icons/Adwaita/48x48/legacy/emblem-urgent.png"
icon[${state[short_break]}]="/usr/share/icons/Adwaita/48x48/legacy/starred.png"
icon[${state[long_break]}]="/usr/share/icons/Adwaita/48x48/legacy/trophy-gold.png"

###############################################################################
# commands
###
function pomo_help() {
  usage
}

function pomo_timer() {
  local -i minutes=$1
  local message=${2:-get it done.}
  
  # timer takes minutes, but we want to convert it to seconds
  local -i duration
  duration=$((minutes * 60))

  while [ $duration -gt 0 ]; do
    printf "%s\n%02d:%02d" $message $(( (duration/60) % 60 )) $((duration%60)) 
    sleep 1
    printf "\r\033[K\033[A\033[K"
    : duration=$((duration--))
  done
}

function pomo_start() {
  # initialize & parse any options received
  local -A options
  
  options=$(getopt -o "d:s:l:" -l "duration:,short-break:,long-break:" -- "$@")
  eval set -- "$options"

  # initialize variables & values
  local -i pomodoro_duration
  local -i short_break_duration
  local -i long_break_duration

  # TODO: calculate and print total session time when complete
  local -i session_start_time
  local -i block_start_time
  local -i pomodoro_count
  local timer_state

  # set our initial/default values
  pomodoro_duration=25
  short_break_duration=5
  long_break_duration=15
  session_start_time=$(date +%s) 
  pomodoro_count=0
  timer_state=${state[working]}

  # process any options passed
  while true; do
    case $1 in
      -d|--duration) pomodoro_duration=$2; shift 2 ;;
      -s|--short-break) short_break_duration=$2; shift 2 ;;
      -l|--long-break) long_break_duration=$2; shift 2 ;;
      *) break ;;
    esac
  done

  printf "%s\n\n" "pomo"

  while true; do
    block_start_time=$(date +%s)
    pomo_notify ${title[$timer_state]} ${message[$timer_state]} ${icon[$timer_state]}

    printf "%s\n\n" "streak: $pomodoro_count"

    case $timer_state in
      ${state[working]})
        pomo_timer $pomodoro_duration ${message[$timer_state]}
        pomodoro_count=$((pomodoro_count + 1))
        
        if [ $((pomodoro_count % 4)) -eq 0 ]; then
          timer_state=${state[long_break]}
        else
          timer_state=${state[short_break]}
        fi
        
        ;;

      ${state[short_break]})
        pomo_timer $short_break_duration ${message[$timer_state]}

        timer_state=${state[working]} ;;

      ${state[long_break]})
        pomo_timer $long_break_duration ${message[$timer_state]}

        timer_state=${state[working]} ;;

      *)
        echo "impossible state"
        exit 1 ;;
    esac

    printf "\r\033[2A\033[K"
  done
}

function pomo() {
  # grab the command the user passed and store any remaining arguments as options
  local args=($@)
  local cmd=${args[1]:-}
  local opts=(${args:1})

  case $cmd in
    help|start|timer) pomo_$cmd $opts ;;
    *) pomo_help ;;
  esac
}

pomo "$@"
