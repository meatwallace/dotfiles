#!/usr/bin/env bash

set -e

usage() {
  cat << HEREDOC
meatbox

Usage:
  meatbox help       show this screen
  meatbox bootstrap  installs the dependencies required to use commands
  meatbox setup      configure the system as it was a clean operating system,
                     creating core directories, installing drivers and our
                     desired packages, updating our core system packages and
                     applying our customized configuration
  meatbox update     installs & updates our desired packages, our core system
                     packages, and applies any new or updated configuration that
                     may have changed since our last run

HEREDOC
}

log_message() {
  printf "%s" "$*"
}

meatbox_run_script() {
  ctx="$1"
  cmd="$2"

  if [ -f "$MEATBOX_SCRIPTS_DIR/$ctx/$cmd.sh" ]; then
    (cd "$MEATBOX_SCRIPTS_DIR/$ctx" && "./$cmd.sh" -- "$@")
  fi
}

# TODO: implement a better way to pass args through to scripts, or perhaps
# extract kernel detection to a utility function
meatbox_run() {
  kernel="$(uname -s | lowercase)"
  distro=""

  if [ "$kernel" = "linux" ]; then
    # normalize our distro to accomodate for higher level distros like Antergos
    case "$(get-distro-id)" in
      arch|antergos) distro="arch" ;;
      alpine) distro="alpine" ;;
      *) echo "meatbox: error - distro is not supported"; exit 1 ;;
    esac
  fi

  meatbox_run_script "$kernel" "$cmd" "$kernel" "$distro"
  meatbox_run_script "$distro" "$cmd" "$kernel" "$distro"
  meatbox_run_script "agnostic" "$cmd" "$kernel" "$distro"
}

meatbox_help() {
  usage
}

meatbox() {
  cmd="$1"

  # probably bad practice, but this avoids any issues where something ends up
  # missing from the path
  # shellcheck source=../.bashrc
  . "$HOME/.bashrc"

  case "$cmd" in
    bootstrap|setup|update)
      start-sudo-loop "$MEATBOX_PASSWORD"
      meatbox_run "$cmd"
      ;;
    *) meatbox_help ;;
  esac
}

meatbox "$@"
